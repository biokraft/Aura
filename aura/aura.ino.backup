// Aura Weather Display - DEBUG VERSION
// Simplified to identify crash location

#include "src/config.h"

// Temporary debug prints using basic Serial
#define DEBUG_PRINT(x) do { Serial.print("[DEBUG] "); Serial.println(x); Serial.flush(); delay(100); } while(0)
#define DEBUG_PRINTF(fmt, ...) do { Serial.print("[DEBUG] "); Serial.printf(fmt, ##__VA_ARGS__); Serial.println(); Serial.flush(); delay(100); } while(0)

void setup() {
    // Initialize serial with longer delay
    Serial.begin(115200);
    delay(2000); // Give serial more time to stabilize
    
    DEBUG_PRINT("=== AURA DEBUG MODE ===");
    DEBUG_PRINT("Serial initialized successfully");
    
    // Test basic memory
    DEBUG_PRINTF("Free heap at start: %u bytes", ESP.getFreeHeap());
    DEBUG_PRINTF("PSRAM available: %s", psramFound() ? "YES" : "NO");
    if (psramFound()) {
        DEBUG_PRINTF("PSRAM size: %u bytes", ESP.getPsramSize());
        DEBUG_PRINTF("Free PSRAM: %u bytes", ESP.getFreePsram());
    }
    
    DEBUG_PRINT("Basic system checks passed");
    
    // Test simple delay loop to ensure system stability
    for (int i = 0; i < 5; i++) {
        DEBUG_PRINTF("Heartbeat %d - Free heap: %u", i+1, ESP.getFreeHeap());
        delay(1000);
    }
    
    DEBUG_PRINT("=== ATTEMPTING COMPONENT INITIALIZATION ===");
    
    // Try to initialize logging system
    DEBUG_PRINT("Initializing logging system...");
    try {
        #include "src/components/logging/logging.h"
        logging_init();
        DEBUG_PRINT("Logging system initialized successfully");
        LOG_MAIN_I("Logging system is working");
    } catch (...) {
        DEBUG_PRINT("ERROR: Logging system initialization failed");
    }
    
    DEBUG_PRINT("=== BASIC INITIALIZATION COMPLETE ===");
    DEBUG_PRINT("If you see this message, basic system is working");
    DEBUG_PRINT("Monitor will continue with heartbeat messages...");
}

void loop() {
    static unsigned long last_heartbeat = 0;
    unsigned long current_time = millis();
    
    // Heartbeat every 5 seconds
    if (current_time - last_heartbeat >= 5000) {
        DEBUG_PRINTF("Heartbeat - Uptime: %lu ms, Free heap: %u bytes", 
                     current_time, ESP.getFreeHeap());
        last_heartbeat = current_time;
    }
    
    // Handle serial commands for debugging
    if (Serial.available()) {
        String command = Serial.readStringUntil('\n');
        command.trim();
        
        if (command == "mem") {
            DEBUG_PRINTF("=== MEMORY STATUS ===");
            DEBUG_PRINTF("Free heap: %u bytes", ESP.getFreeHeap());
            DEBUG_PRINTF("Min free heap: %u bytes", ESP.getMinFreeHeap());
            DEBUG_PRINTF("Heap size: %u bytes", ESP.getHeapSize());
            if (psramFound()) {
                DEBUG_PRINTF("PSRAM size: %u bytes", ESP.getPsramSize());
                DEBUG_PRINTF("Free PSRAM: %u bytes", ESP.getFreePsram());
            }
            DEBUG_PRINTF("CPU freq: %u MHz", ESP.getCpuFreqMHz());
            DEBUG_PRINTF("Flash size: %u bytes", ESP.getFlashChipSize());
        } else if (command == "restart") {
            DEBUG_PRINT("Restarting ESP32...");
            delay(1000);
            ESP.restart();
        } else if (command == "info") {
            DEBUG_PRINTF("Chip model: %s", ESP.getChipModel());
            DEBUG_PRINTF("Chip revision: %d", ESP.getChipRevision());
            DEBUG_PRINTF("Chip cores: %d", ESP.getChipCores());
            DEBUG_PRINTF("SDK version: %s", ESP.getSdkVersion());
        } else if (command == "test_display") {
            DEBUG_PRINT("=== TESTING DISPLAY INITIALIZATION ===");
            try {
                DEBUG_PRINT("Including TFT_eSPI...");
                #include <TFT_eSPI.h>
                DEBUG_PRINT("Creating TFT instance...");
                TFT_eSPI* tft = new TFT_eSPI();
                DEBUG_PRINT("Initializing TFT...");
                tft->init();
                DEBUG_PRINT("TFT init successful");
                delete tft;
                DEBUG_PRINT("TFT test completed successfully");
            } catch (...) {
                DEBUG_PRINT("ERROR: TFT initialization failed");
            }
        } else if (command == "test_lvgl") {
            DEBUG_PRINT("=== TESTING LVGL INITIALIZATION ===");
            try {
                DEBUG_PRINT("Including LVGL...");
                #include <lvgl.h>
                DEBUG_PRINT("Initializing LVGL...");
                lv_init();
                DEBUG_PRINT("LVGL init successful");
                DEBUG_PRINT("LVGL test completed successfully");
            } catch (...) {
                DEBUG_PRINT("ERROR: LVGL initialization failed");
            }
        } else if (command == "help") {
            DEBUG_PRINT("=== DEBUG COMMANDS ===");
            DEBUG_PRINT("mem - Show memory status");
            DEBUG_PRINT("restart - Restart ESP32");
            DEBUG_PRINT("info - Show chip info");
            DEBUG_PRINT("test_display - Test TFT_eSPI initialization");
            DEBUG_PRINT("test_lvgl - Test LVGL initialization");
            DEBUG_PRINT("help - Show this help");
        }
    }
    
    delay(100); // Small delay to prevent watchdog issues
}
